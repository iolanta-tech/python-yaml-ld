{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"YAML-LD implementation for Python","text":"<p>A Python implementation for handling YAML-LD documents.</p> <p><code>python-yaml-ld</code> is a wrapper on top of  digitalbazaar/pyld.</p>"},{"location":"#what-is-yaml-ld","title":"What is YAML-LD?","text":"<p>YAML-LD is a YAML-based serialization for Linked Data, drawing inspiration from JSON-LD. It aims to bring the ease of YAML along with the structured linked data principles of JSON-LD. The YAML-LD specification provides detailed information on the structure and usage of YAML-LD.</p>"},{"location":"#what-does-python-yaml-ld-provide","title":"What does <code>python-yaml-ld</code> provide?","text":"Python API<code>pyld</code> CLI <p><code>import yaml_ld</code> provides you with the following functions to operate on \uff0a-LD documents:</p> <ul> <li> <p> <code>load_document()</code></p> <p>Load an \uff0a-LD document.</p> </li> <li> <p> <code>expand()</code></p> <p>Expand a \uff0a-LD document.</p> </li> <li> <p> <code>compact()</code></p> <p>Compact a \uff0a-LD document.</p> </li> <li> <p> <code>flatten()</code></p> <p>Flatten a \uff0a-LD document.</p> </li> <li> <p> <code>to_rdf()</code></p> <p>Convert a \uff0a-LD document to RDF.</p> </li> <li> <p> <code>from_rdf()</code></p> <p>Convert a RDF dataset to a \uff0a-LD document.</p> </li> <li> <p> <code>frame()</code></p> <p>Frame a \uff0a-LD document.</p> </li> </ul> <p><code>pip install yaml-ld</code> makes <code>pyld</code> executable available, which exposes the functionality of <code>pyld</code> library with additions provided by <code>python-yaml-ld</code>.</p> <ul> <li> <p> <code>pyld get</code></p> <p>Load an \uff0a-LD document.</p> </li> <li> <p> <code>pyld expand</code></p> <p>Expand a \uff0a-LD document.</p> </li> <li> <p> <code>pyld compact</code></p> <p>Compact a \uff0a-LD document.</p> </li> <li> <p> <code>pyld flatten</code></p> <p>Flatten a \uff0a-LD document.</p> </li> <li> <p> <code>pyld to-rdf</code></p> <p>Convert a \uff0a-LD document to RDF.</p> </li> <li> <p> <code>pyld from-rdf</code></p> <p>Convert a RDF dataset to a \uff0a-LD document.</p> </li> </ul>"},{"location":"load-document/","title":"load_document()","text":""},{"location":"load-document/#yaml_ld.load_document.load_document","title":"yaml_ld.load_document.load_document","text":"<pre><code>load_document(\n    url,\n    base=None,\n    profile=None,\n    requestProfile=None,\n    options: BaseOptions = DEFAULT_BASE_OPTIONS,\n) -&gt; RemoteDocument\n</code></pre> <p>Load an \uff0a-LD document.</p> <p>The document can be retrieved from local filesystem or from the Web.</p>"},{"location":"load-document/#yaml_ld.load_document.BaseOptions","title":"yaml_ld.load_document.BaseOptions","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base options shared by all YAML-LD API methods.</p>"},{"location":"load-document/#yaml_ld.load_document.BaseOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"load-document/#yaml_ld.load_document.BaseOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"load-document/#examples","title":"Examples","text":"get_local_file.py<pre><code>from pprint import pprint\n\nimport yaml_ld\n\npprint(yaml_ld.load_document('pythagorean-theorem.yamlld'))\n</code></pre> pythagorean-theorem.yamlld<pre><code>\"@context\":\n  - https://json-ld.org/contexts/dollar-convenience.jsonld\n  - prov: http://www.w3.org/ns/prov#\n  - variable: https://variables.namespace/\n    =: https://math.namespace/equal\n    +: https://math.namespace/add\n    \u00b2: https://math.namespace/squared\n\n$id: https://dbpedia.org/page/Pythagorean_theorem\nprov:Entity:\n  =:\n    - +:\n      - \u00b2: variable:a\n      - \u00b2: variable:b\n    - \u00b2: variable:c\n</code></pre> python get_local_file.py<pre><code>{'contentType': 'application/ld+yaml',\n 'contextUrl': None,\n 'document': {'$id': 'https://dbpedia.org/page/Pythagorean_theorem',\n              '@context': ['https://json-ld.org/contexts/dollar-convenience.jsonld',\n                           {'prov': 'http://www.w3.org/ns/prov#'},\n                           {'+': 'https://math.namespace/add',\n                            '=': 'https://math.namespace/equal',\n                            'variable': 'https://variables.namespace/',\n                            '\u00b2': 'https://math.namespace/squared'}],\n              'prov:Entity': {'=': [{'+': [{'\u00b2': 'variable:a'},\n                                           {'\u00b2': 'variable:b'}]},\n                                    {'\u00b2': 'variable:c'}]}},\n 'documentUrl': 'pythagorean-theorem.yamlld'}\n</code></pre>"},{"location":"blog/","title":"Blog","text":"<p>{{ blog_content }}</p>"},{"location":"blog/any-ld/","title":"Use \uff0a-LD to denote any JSON-LD derived standard","text":"","tags":["decision"]},{"location":"blog/any-ld/#context","title":"Context","text":"<p><code>python-yaml-ld</code>, despite the name, supports multiple LD standards:</p> <ul> <li>JSON-LD,</li> <li>YAML-LD,</li> <li>and, potentially in the future, CBOR-LD, TOML-LD, and more.</li> </ul> <p>Thus, it would be unfair to say that <code>expand()</code> can only work on JSON-LD or YAML-LD documents.</p>","tags":["decision"]},{"location":"blog/any-ld/#decision","title":"Decision","text":"<p>Use \uff0a-LD (pronounced: Any-LD) notation to describe all JSON-LD inspired standards/formats.</p>","tags":["decision"]},{"location":"blog/diff-test-results/","title":"Diff test results","text":"","tags":["decision"]},{"location":"blog/diff-test-results/#context","title":"Context","text":"<p>Current test run for this project outputs:</p> <pre><code>====== 637 failed, 255 passed, 1 xfailed, 10 warnings in 80.24s (0:01:20) ======\n</code></pre> <p>There is no way all these failing tests can be fixed in one PR; however, it would be preferable NOT to break tests that were not broken in <code>main</code> when you're trying to merge your PR.</p> <p>Is there a Github action that could check for that?</p>","tags":["decision"]},{"location":"blog/diff-test-results/#alternatives","title":"Alternatives","text":"<ul> <li>openpgpjs/github-action-pull-request-benchmark runs tests both in main branch and in PR branch but compares their performance, not results</li> <li>Similarly, jenkinsci/github-pr-coverage-status-plugin compares coverage -- but this is a Jenkins plugin, not a GitHub Action</li> </ul> <p>I cannot find anything else.</p>","tags":["decision"]},{"location":"blog/diff-test-results/#decision","title":"Decision","text":"<p>Implement such a script.</p>","tags":["decision"]},{"location":"blog/diff-test-results/#consequences","title":"Consequences","text":"<p>It will be easier to develop the project by providing a clear summary of what was fixed and what was newly broken.</p>","tags":["decision"]},{"location":"blog/document-pydantic-models/","title":"Document Pydantic models with mkdocstrings","text":"","tags":["decision"]},{"location":"blog/document-pydantic-models/#context","title":"Context","text":"<p>We need to auto document Pydantic models in the library, drawing them as tables.</p> Library Draws tables? Last Update mkdocstrings No mkapi No mkdoxy No mkautodoc No inari No automacdoc No mkdocs-typedoc No mkdocs-doxygen-plugin No yaarg Yes 2021-03-14","tags":["decision"]},{"location":"blog/document-pydantic-models/#decision","title":"Decision","text":"<ul> <li>Use mkdocstrings for now</li> <li>Maybe file an issue about rendering Pydantic models there</li> </ul>","tags":["decision"]},{"location":"blog/parallelize-test-branches/","title":"Parallelize tests per branch in GitHub actions","text":"","tags":["decision"]},{"location":"blog/parallelize-test-branches/#context","title":"Context","text":"<p>Shall we</p> <ul> <li>Run tests against <code>main</code> and against the PR branch within the same Python script,</li> <li>Or run them separately using GitHub actions?</li> </ul>","tags":["decision"]},{"location":"blog/parallelize-test-branches/#decision","title":"Decision","text":"<p>Use GitHub actions.</p>","tags":["decision"]},{"location":"blog/parallelize-test-branches/#consequences","title":"Consequences","text":"<ul> <li>This way, even if <code>main</code> and the PR branch have different dependencies they will be correctly configured, and all packages installed in each environment, avoiding conflicts</li> <li>We will have to save test results for each run as artifacts.</li> </ul>","tags":["decision"]},{"location":"blog/write-options-manually/","title":"Write <code>options</code> types manually","text":"","tags":["decision"]},{"location":"blog/write-options-manually/#context","title":"Context","text":"<p><code>expand()</code>, <code>frame()</code>, and the rest of functions specified by JSON-LD API take <code>options</code> argument, described by <code>JsonLdOptions</code> interface in the specification.</p> <p>Some options are only valid for select functions, for instance, <code>frameExpansion</code> is only valid for <code>frame()</code>.</p>","tags":["decision"]},{"location":"blog/write-options-manually/#decision","title":"Decision","text":"<ul> <li>In Python types, use a separate type for each function's <code>options</code> argument</li> <li>Write these types manually instead of generating them from IDL.</li> </ul>","tags":["decision"]},{"location":"blog/write-options-manually/#consequences","title":"Consequences","text":"<ul> <li>Improved typing hints in application code;</li> <li>Invalid states made unrepresentable;</li> <li>Enhanced development experience.</li> </ul>","tags":["decision"]},{"location":"blog/yaml-library/","title":"Use <code>pyyaml</code> as YAML parsing library","text":"<p>Info</p> <p>Please see the source code of this page. I just wrote down the decision in YAML front matter but at this point I do not have the code to visualize it properly. I will get back to this later.</p>","tags":["decision"]},{"location":"blog/yarl/","title":"<code>urlpath</code> \u2192 <code>yarl</code> as URL manipulation library","text":"","tags":["decision"]},{"location":"blog/yarl/#context","title":"Context","text":"<p>We use <code>URL</code> class from <code>urlpath</code> library a lot. It automates URL manipulations.</p> grep --include '*.py' -R URL yaml_ld | head<pre><code>yaml_ld/string_as_url_or_path.py:from urlpath import URL\nyaml_ld/string_as_url_or_path.py:def as_url_or_path(raw: str) -&gt; URL | Path:\nyaml_ld/string_as_url_or_path.py:    \"\"\"Interpret a raw string as a URL or a local disk path.\"\"\"\nyaml_ld/string_as_url_or_path.py:    if (url := URL(raw)).scheme:\nyaml_ld/models.py:from urlpath import URL\nyaml_ld/models.py:    JsonLdRecord | Sequence[JsonLdRecord] | str | Path | URL | RemoteDocument\nyaml_ld/models.py:    expand_context: JsonLdRecord | str | Path | URL | None = None\nyaml_ld/document_loaders/choice_by_scheme.py:from urlpath import URL\nyaml_ld/document_loaders/choice_by_scheme.py:    Cannot choose the loader by URL protocol.\nyaml_ld/document_loaders/choice_by_scheme.py:    * URL: `{self.url}`\n</code></pre> <p>But, last PyPI release of <code>urlpath</code> has been published on 2021-11-12, which is also the date of the last commit at the project GitHub repository. That is the reason why <code>urlpath</code> is incompatible with Python 3.12. </p>","tags":["decision"]},{"location":"blog/yarl/#alternatives","title":"Alternatives","text":"Library Stars Last Release yarl 1.3k 2023-12-06 furl 2.6k 2021-09-28","tags":["decision"]},{"location":"blog/yarl/#decision","title":"Decision","text":"<p>Use <code>yarl</code> as a library that's current and regularly updated.</p>","tags":["decision"]},{"location":"cli/","title":"CLI","text":"<p><code>python-yaml-ld</code> exposes a command line interface utility.</p> \u21a6 <code>pyld</code><pre><code> Usage: pyld [OPTIONS] COMMAND [ARGS]...                                        \n\n Command line tool to operate on \uff0a-LD data, where \uff0a stands for JSON or YAML.  \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --log-level                 [debug|info|error]  Logging level.               \u2502\n\u2502                                                 [default: error]             \u2502\n\u2502 --install-completion                            Install completion for the   \u2502\n\u2502                                                 current shell.               \u2502\n\u2502 --show-completion                               Show completion for the      \u2502\n\u2502                                                 current shell, to copy it or \u2502\n\u2502                                                 customize the installation.  \u2502\n\u2502 --help                                          Show this message and exit.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 expand     Expand a \uff0a-LD document.                                          \u2502\n\u2502 get        Load and display a \uff0a-LD document.                                \u2502\n\u2502 compact    Compact a \uff0a-LD document.                                         \u2502\n\u2502 flatten    Flatten a \uff0a-LD document.                                         \u2502\n\u2502 to-rdf     Convert a \uff0a-LD document \u2192 RDF.                                   \u2502\n\u2502 from-rdf   Convert an RDF document \u2192 \uff0a-LD form.                             \u2502\n\u2502 cache      Cache management.                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/compact/","title":"<code>pyld compact</code>","text":"\u21a6 <code>pyld compact --help</code><pre><code> Usage: pyld compact [OPTIONS] [INPUT_]                                         \n\n Compact a \uff0a-LD document.                                                      \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --ctx                                        TEXT         Context to compact \u2502\n\u2502                                                           with.              \u2502\n\u2502 --output-format                              [json|yaml]  Format to output   \u2502\n\u2502                                                           the data at.       \u2502\n\u2502                                                           [default: json]    \u2502\n\u2502 --base                                       TEXT         Base URL.          \u2502\n\u2502 --extract-all-scri\u2026    --no-extract-all-\u2026                 Extract all        \u2502\n\u2502                                                           documents in YAML  \u2502\n\u2502                                                           stream, or all     \u2502\n\u2502                                                           scripts embedded   \u2502\n\u2502                                                           in HTML.           \u2502\n\u2502                                                           [default:          \u2502\n\u2502                                                           extract-all-scrip\u2026 \u2502\n\u2502 --expand-context                             TEXT         Context to expand  \u2502\n\u2502                                                           with.              \u2502\n\u2502 --help                                                    Show this message  \u2502\n\u2502                                                           and exit.          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/compact/#example","title":"Example","text":"\u21a6 <code>pyld compact docs/examples/pythagorean-theorem.yamlld --output-format yaml</code><pre><code>'@id': https://dbpedia.org/page/Pythagorean_theorem\nhttp://www.w3.org/ns/prov#Entity:\n  https://math.namespace/equal:\n  - https://math.namespace/add:\n    - https://math.namespace/squared: variable:a\n    - https://math.namespace/squared: variable:b\n  - https://math.namespace/squared: variable:c\n</code></pre>"},{"location":"cli/expand/","title":"<code>pyld expand</code>","text":"\u21a6 <code>pyld expand --help</code><pre><code> Usage: pyld expand [OPTIONS] [INPUT_]                                          \n\n Expand a \uff0a-LD document.                                                       \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --output-format                              [json|yaml]  Format to output   \u2502\n\u2502                                                           the data at.       \u2502\n\u2502                                                           [default: json]    \u2502\n\u2502 --base                                       TEXT         Base URL.          \u2502\n\u2502 --extract-all-scri\u2026    --no-extract-all-\u2026                 Extract all        \u2502\n\u2502                                                           documents in YAML  \u2502\n\u2502                                                           stream, or all     \u2502\n\u2502                                                           scripts embedded   \u2502\n\u2502                                                           in HTML.           \u2502\n\u2502                                                           [default:          \u2502\n\u2502                                                           no-extract-all-sc\u2026 \u2502\n\u2502 --expand-context                             TEXT         Context to expand  \u2502\n\u2502                                                           with.              \u2502\n\u2502 --help                                                    Show this message  \u2502\n\u2502                                                           and exit.          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/expand/#example","title":"Example","text":"\u21a6 <code>pyld expand docs/examples/pythagorean-theorem.yamlld --output-format yaml</code><pre><code>- '@id': https://dbpedia.org/page/Pythagorean_theorem\n  http://www.w3.org/ns/prov#Entity:\n  - https://math.namespace/equal:\n    - https://math.namespace/add:\n      - https://math.namespace/squared:\n        - '@value': variable:a\n      - https://math.namespace/squared:\n        - '@value': variable:b\n    - https://math.namespace/squared:\n      - '@value': variable:c\n</code></pre>"},{"location":"cli/flatten/","title":"<code>pyld flatten</code>","text":"\u21a6 <code>pyld flatten --help</code><pre><code> Usage: pyld flatten [OPTIONS] [INPUT_]                                         \n\n Flatten a \uff0a-LD document.                                                      \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --ctx                                        TEXT         Context to compact \u2502\n\u2502                                                           with.              \u2502\n\u2502 --output-format                              [json|yaml]  Format to output   \u2502\n\u2502                                                           the data at.       \u2502\n\u2502                                                           [default: json]    \u2502\n\u2502 --base                                       TEXT         Base URL.          \u2502\n\u2502 --extract-all-scri\u2026    --no-extract-all-\u2026                 Extract all        \u2502\n\u2502                                                           documents in YAML  \u2502\n\u2502                                                           stream, or all     \u2502\n\u2502                                                           scripts embedded   \u2502\n\u2502                                                           in HTML.           \u2502\n\u2502                                                           [default:          \u2502\n\u2502                                                           extract-all-scrip\u2026 \u2502\n\u2502 --expand-context                             TEXT         Context to expand  \u2502\n\u2502                                                           with.              \u2502\n\u2502 --help                                                    Show this message  \u2502\n\u2502                                                           and exit.          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/flatten/#example","title":"Example","text":"\u21a6 <code>pyld flatten docs/examples/pythagorean-theorem.yamlld --output-format yaml</code><pre><code>- '@id': _:b0\n  https://math.namespace/equal:\n  - '@id': _:b1\n  - '@id': _:b4\n- '@id': _:b1\n  https://math.namespace/add:\n  - '@id': _:b2\n  - '@id': _:b3\n- '@id': _:b2\n  https://math.namespace/squared:\n  - '@value': variable:a\n- '@id': _:b3\n  https://math.namespace/squared:\n  - '@value': variable:b\n- '@id': _:b4\n  https://math.namespace/squared:\n  - '@value': variable:c\n- '@id': https://dbpedia.org/page/Pythagorean_theorem\n  http://www.w3.org/ns/prov#Entity:\n  - '@id': _:b0\n</code></pre>"},{"location":"cli/frame/","title":"<code>pyld frame</code>","text":"<p>Not implemented yet</p> <p>Framing functionality is not yet available in <code>pyld</code> CLI. See  iolanta-tech/python-yaml-ld#172.</p>"},{"location":"cli/from-rdf/","title":"<code>pyld from-rdf</code>","text":"\u21a6 <code>pyld from-rdf --help</code><pre><code> Usage: pyld from-rdf [OPTIONS] [INPUT_]                                        \n\n Convert an RDF document \u2192 \uff0a-LD form.                                          \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --use-native-types    --no-use-native-t\u2026                 Convert XSD types   \u2502\n\u2502                                                          into native types   \u2502\n\u2502                                                          (boolean, integer,  \u2502\n\u2502                                                          double)?            \u2502\n\u2502                                                          [default:           \u2502\n\u2502                                                          use-native-types]   \u2502\n\u2502 --output-format                             [json|yaml]  Format to output    \u2502\n\u2502                                                          the data at.        \u2502\n\u2502                                                          [default: json]     \u2502\n\u2502 --help                                                   Show this message   \u2502\n\u2502                                                          and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/get/","title":"<code>pyld get</code>","text":"\u21a6 <code>pyld get --help</code><pre><code> Usage: pyld get [OPTIONS] [INPUT_]                                             \n\n Load and display a \uff0a-LD document.                                             \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --base                 TEXT         Base URL.                                \u2502\n\u2502 --output-format        [json|yaml]  Format to output the data at.            \u2502\n\u2502                                     [default: json]                          \u2502\n\u2502 --help                              Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/get/#example-from-a-local-file","title":"Example: From a local file","text":"\u21a6 <code>pyld get docs/examples/pythagorean-theorem.yamlld</code><pre><code>{\n  \"@context\": [\n    \"https://json-ld.org/contexts/dollar-convenience.jsonld\",\n    {\n      \"prov\": \"http://www.w3.org/ns/prov#\"\n    },\n    {\n      \"variable\": \"https://variables.namespace/\",\n      \"=\": \"https://math.namespace/equal\",\n      \"+\": \"https://math.namespace/add\",\n      \"\\u00b2\": \"https://math.namespace/squared\"\n    }\n  ],\n  \"$id\": \"https://dbpedia.org/page/Pythagorean_theorem\",\n  \"prov:Entity\": {\n    \"=\": [\n      {\n        \"+\": [\n          {\n            \"\\u00b2\": \"variable:a\"\n          },\n          {\n            \"\\u00b2\": \"variable:b\"\n          }\n        ]\n      },\n      {\n        \"\\u00b2\": \"variable:c\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"cli/get/#example-from-web","title":"Example: From Web","text":"\u21a6 <code>pyld get https://schema.org/isPartOf --output-format yaml</code><pre><code>'@context':\n  brick: https://brickschema.org/schema/Brick#\n  csvw: http://www.w3.org/ns/csvw#\n  dc: http://purl.org/dc/elements/1.1/\n  dcam: http://purl.org/dc/dcam/\n  dcat: http://www.w3.org/ns/dcat#\n  dcmitype: http://purl.org/dc/dcmitype/\n  dcterms: http://purl.org/dc/terms/\n  doap: http://usefulinc.com/ns/doap#\n  foaf: http://xmlns.com/foaf/0.1/\n  odrl: http://www.w3.org/ns/odrl/2/\n  org: http://www.w3.org/ns/org#\n  owl: http://www.w3.org/2002/07/owl#\n  prof: http://www.w3.org/ns/dx/prof/\n  prov: http://www.w3.org/ns/prov#\n  qb: http://purl.org/linked-data/cube#\n  rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n  schema: https://schema.org/\n  sh: http://www.w3.org/ns/shacl#\n  skos: http://www.w3.org/2004/02/skos/core#\n  sosa: http://www.w3.org/ns/sosa/\n  ssn: http://www.w3.org/ns/ssn/\n  time: http://www.w3.org/2006/time#\n  vann: http://purl.org/vocab/vann/\n  void: http://rdfs.org/ns/void#\n  xsd: http://www.w3.org/2001/XMLSchema#\n'@id': schema:isPartOf\n'@type': rdf:Property\nrdfs:comment: Indicates an item or CreativeWork that this item, or CreativeWork (in\n  some sense), is part of.\nrdfs:label: isPartOf\nschema:domainIncludes:\n  '@id': schema:CreativeWork\nschema:inverseOf:\n  '@id': schema:hasPart\nschema:rangeIncludes:\n- '@id': schema:URL\n- '@id': schema:CreativeWork\n</code></pre>"},{"location":"cli/to-rdf/","title":"<code>pyld to-rdf</code>","text":"\u21a6 <code>pyld to-rdf --help</code><pre><code> Usage: pyld to-rdf [OPTIONS] [INPUT_]                                          \n\n Convert a \uff0a-LD document \u2192 RDF.                                                \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   input_      [INPUT_]  Path or URL. Omit to read from standard input.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --output-format                               [nquads]  Format to output the \u2502\n\u2502                                                         data at.             \u2502\n\u2502                                                         [default: nquads]    \u2502\n\u2502 --base                                        TEXT      Base URL.            \u2502\n\u2502 --extract-all-scrip\u2026    --no-extract-all-\u2026              Extract all          \u2502\n\u2502                                                         documents in YAML    \u2502\n\u2502                                                         stream, or all       \u2502\n\u2502                                                         scripts embedded in  \u2502\n\u2502                                                         HTML.                \u2502\n\u2502                                                         [default:            \u2502\n\u2502                                                         extract-all-scripts] \u2502\n\u2502 --help                                                  Show this message    \u2502\n\u2502                                                         and exit.            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cli/to-rdf/#example","title":"Example","text":"\u21a6 <code>pyld to-rdf docs/examples/pythagorean-theorem.yamlld</code><pre><code>&lt;https://dbpedia.org/page/Pythagorean_theorem&gt; &lt;http://www.w3.org/ns/prov#Entity&gt; _:b0 .\n_:b0 &lt;https://math.namespace/equal&gt; _:b1 .\n_:b0 &lt;https://math.namespace/equal&gt; _:b4 .\n_:b1 &lt;https://math.namespace/add&gt; _:b2 .\n_:b1 &lt;https://math.namespace/add&gt; _:b3 .\n_:b2 &lt;https://math.namespace/squared&gt; \"variable:a\" .\n_:b3 &lt;https://math.namespace/squared&gt; \"variable:b\" .\n_:b4 &lt;https://math.namespace/squared&gt; \"variable:c\" .\n</code></pre>"},{"location":"compact/","title":"compact()","text":""},{"location":"compact/#yaml_ld.compact.compact","title":"yaml_ld.compact.compact","text":"<pre><code>compact(\n    document: JsonLdInput,\n    ctx: JsonLdContext | None = None,\n    options: CompactOptions = DEFAULT_COMPACT_OPTIONS,\n) -&gt; JsonLdRecord | list[JsonLdRecord]\n</code></pre> <p>Compact a \uff0a-LD document.</p> <p>Replace full IRIs with shorter terms and compact IRIs using a context, making the document more human-readable while preserving its original structure and semantics.</p>"},{"location":"compact/#example","title":"Example","text":"compact.py<pre><code>import yaml\n\nimport yaml_ld\n\nprint(\n    yaml.dump(\n        yaml_ld.compact(\n            'pythagorean-theorem.yamlld',\n            ctx='ctx.jsonld',\n        ),\n    ),\n)\n</code></pre> ctx.jsonld<pre><code>{\n  \"@context\": {\n    \"dbp\": \"https://dbpedia.org/page/\"\n  }\n}\n</code></pre> pythagorean-theorem.yamlld<pre><code>\"@context\":\n  - https://json-ld.org/contexts/dollar-convenience.jsonld\n  - prov: http://www.w3.org/ns/prov#\n  - variable: https://variables.namespace/\n    =: https://math.namespace/equal\n    +: https://math.namespace/add\n    \u00b2: https://math.namespace/squared\n\n$id: https://dbpedia.org/page/Pythagorean_theorem\nprov:Entity:\n  =:\n    - +:\n      - \u00b2: variable:a\n      - \u00b2: variable:b\n    - \u00b2: variable:c\n</code></pre> python compact.py<pre><code>'@context': ctx.jsonld\n'@id': dbp:Pythagorean_theorem\nhttp://www.w3.org/ns/prov#Entity:\n  https://math.namespace/equal:\n  - https://math.namespace/add:\n    - https://math.namespace/squared: variable:a\n    - https://math.namespace/squared: variable:b\n  - https://math.namespace/squared: variable:c\n</code></pre>"},{"location":"compact/options/","title":"Options","text":""},{"location":"compact/options/#yaml_ld.compact.CompactOptions","title":"yaml_ld.compact.CompactOptions","text":"<p>               Bases: <code>BaseOptions</code>, <code>ExtractAllScriptsOptions</code>, <code>ExpandContextOptions</code></p> <p>Options to compact a YAML-LD document.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.compact_arrays","title":"compact_arrays  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>compact_arrays: bool = True\n</code></pre> <p>Compact arrays to single values when appropriate?</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.expand_context","title":"expand_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expand_context: JsonLdRecord | URI | None = None\n</code></pre> <p>A context to expand with.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.extract_all_scripts","title":"extract_all_scripts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_all_scripts: bool = False\n</code></pre> <p>True to extract all YAML-LD script elements from HTML, False to extract just the first.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.graph","title":"graph  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>graph: bool = False\n</code></pre> <p>True to always output a top-level graph.</p>"},{"location":"compact/options/#yaml_ld.compact.CompactOptions.skip_expansion","title":"skip_expansion  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>skip_expansion: bool = False\n</code></pre> <p>True to skip the expansion process, False to include it.</p>"},{"location":"expand/","title":"expand()","text":""},{"location":"expand/#yaml_ld.expand.expand","title":"yaml_ld.expand.expand","text":"<pre><code>expand(\n    document: JsonLdInput,\n    options: ExpandOptions = DEFAULT_EXPAND_OPTIONS,\n) -&gt; list[JsonLdRecord]\n</code></pre> <p>Expand a \uff0a-LD document.</p> <p>Converts all compact IRIs, keywords, and terms into their absolute IRI representations.</p>"},{"location":"expand/#example","title":"Example","text":"expand.py<pre><code>import yaml\n\nimport yaml_ld\n\nprint(yaml.dump(yaml_ld.expand('pythagorean-theorem.yamlld')))\n</code></pre> pythagorean-theorem.yamlld<pre><code>\"@context\":\n  - https://json-ld.org/contexts/dollar-convenience.jsonld\n  - prov: http://www.w3.org/ns/prov#\n  - variable: https://variables.namespace/\n    =: https://math.namespace/equal\n    +: https://math.namespace/add\n    \u00b2: https://math.namespace/squared\n\n$id: https://dbpedia.org/page/Pythagorean_theorem\nprov:Entity:\n  =:\n    - +:\n      - \u00b2: variable:a\n      - \u00b2: variable:b\n    - \u00b2: variable:c\n</code></pre> python expand.py<pre><code>- '@id': https://dbpedia.org/page/Pythagorean_theorem\n  http://www.w3.org/ns/prov#Entity:\n  - https://math.namespace/equal:\n    - https://math.namespace/add:\n      - https://math.namespace/squared:\n        - '@value': variable:a\n      - https://math.namespace/squared:\n        - '@value': variable:b\n    - https://math.namespace/squared:\n      - '@value': variable:c\n</code></pre>"},{"location":"expand/options/","title":"Options","text":""},{"location":"expand/options/#yaml_ld.expand.ExpandOptions","title":"yaml_ld.expand.ExpandOptions","text":"<p>               Bases: <code>BaseOptions</code>, <code>ExtractAllScriptsOptions</code>, <code>ExpandContextOptions</code></p> <p>Options for <code>jsonld.expand()</code>.</p>"},{"location":"expand/options/#yaml_ld.expand.ExpandOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"expand/options/#yaml_ld.expand.ExpandOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"expand/options/#yaml_ld.expand.ExpandOptions.expand_context","title":"expand_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expand_context: JsonLdRecord | URI | None = None\n</code></pre> <p>A context to expand with.</p>"},{"location":"expand/options/#yaml_ld.expand.ExpandOptions.extract_all_scripts","title":"extract_all_scripts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_all_scripts: bool = False\n</code></pre> <p>True to extract all YAML-LD script elements from HTML, False to extract just the first.</p>"},{"location":"flatten/","title":"flatten()","text":""},{"location":"flatten/#yaml_ld.flatten.flatten","title":"yaml_ld.flatten.flatten","text":"<pre><code>flatten(\n    document: JsonLdInput,\n    ctx: JsonLdContext | None = None,\n    options: FlattenOptions = DEFAULT_FLATTEN_OPTIONS,\n) -&gt; JsonLdRecord\n</code></pre> <p>Flatten a \uff0a-LD document.</p> <p>Outputs a single array containing all nodes, making no assumptions about their relationships, to simplify data processing and ensure all referenced nodes are included.</p>"},{"location":"flatten/#example","title":"Example","text":"flatten.py<pre><code>import yaml\n\nimport yaml_ld\n\nprint(yaml.dump(yaml_ld.flatten('pythagorean-theorem.yamlld')))\n</code></pre> pythagorean-theorem.yamlld<pre><code>\"@context\":\n  - https://json-ld.org/contexts/dollar-convenience.jsonld\n  - prov: http://www.w3.org/ns/prov#\n  - variable: https://variables.namespace/\n    =: https://math.namespace/equal\n    +: https://math.namespace/add\n    \u00b2: https://math.namespace/squared\n\n$id: https://dbpedia.org/page/Pythagorean_theorem\nprov:Entity:\n  =:\n    - +:\n      - \u00b2: variable:a\n      - \u00b2: variable:b\n    - \u00b2: variable:c\n</code></pre> python flatten.py<pre><code>- '@id': _:b0\n  https://math.namespace/equal:\n  - '@id': _:b1\n  - '@id': _:b4\n- '@id': _:b1\n  https://math.namespace/add:\n  - '@id': _:b2\n  - '@id': _:b3\n- '@id': _:b2\n  https://math.namespace/squared:\n  - '@value': variable:a\n- '@id': _:b3\n  https://math.namespace/squared:\n  - '@value': variable:b\n- '@id': _:b4\n  https://math.namespace/squared:\n  - '@value': variable:c\n- '@id': https://dbpedia.org/page/Pythagorean_theorem\n  http://www.w3.org/ns/prov#Entity:\n  - '@id': _:b0\n</code></pre>"},{"location":"flatten/options/","title":"Options","text":""},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions","title":"yaml_ld.flatten.FlattenOptions","text":"<p>               Bases: <code>BaseOptions</code>, <code>ExtractAllScriptsOptions</code>, <code>ExpandContextOptions</code></p> <p>Options to flatten a YAML-LD document.</p>"},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions.compact_arrays","title":"compact_arrays  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>compact_arrays: bool = True\n</code></pre> <p>Compact arrays to single values when appropriate?</p>"},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions.expand_context","title":"expand_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expand_context: JsonLdRecord | URI | None = None\n</code></pre> <p>A context to expand with.</p>"},{"location":"flatten/options/#yaml_ld.flatten.FlattenOptions.extract_all_scripts","title":"extract_all_scripts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_all_scripts: bool = False\n</code></pre> <p>True to extract all YAML-LD script elements from HTML, False to extract just the first.</p>"},{"location":"frame/","title":"frame()","text":""},{"location":"frame/#yaml_ld.frame.frame","title":"yaml_ld.frame.frame","text":"<pre><code>frame(\n    document: JsonLdInput,\n    frame: JsonLdRecord,\n    options: FrameOptions = DEFAULT_FRAME_OPTIONS,\n) -&gt; JsonLdRecord\n</code></pre> <p>Frame a \uff0a-LD document.</p>"},{"location":"frame/options/","title":"Options","text":""},{"location":"frame/options/#yaml_ld.frame.FrameOptions","title":"yaml_ld.frame.FrameOptions","text":"<p>               Bases: <code>BaseOptions</code>, <code>ExtractAllScriptsOptions</code>, <code>ExpandContextOptions</code></p> <p>Options for YAML-LD framing.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.embed","title":"embed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>embed: bool = True\n</code></pre> <p>Sets the value object embed flag used in the Framing Algorithm. A boolean value of true sets the flag to @once, while a value of false sets the flag to @never.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.expand_context","title":"expand_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expand_context: JsonLdRecord | URI | None = None\n</code></pre> <p>A context to expand with.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.explicit","title":"explicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explicit: bool = False\n</code></pre> <p>Default <code>@explicit</code> flag.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.extract_all_scripts","title":"extract_all_scripts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_all_scripts: bool = False\n</code></pre> <p>True to extract all YAML-LD script elements from HTML, False to extract just the first.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.frame_default","title":"frame_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frame_default: bool = False\n</code></pre> <p>Instead of framing a merged graph, frame only the default graph.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.omit_default","title":"omit_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>omit_default: bool = False\n</code></pre> <p>Default <code>@omit_default</code> flag.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.prune_blank_node_identifiers","title":"prune_blank_node_identifiers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prune_blank_node_identifiers: bool = True\n</code></pre> <p>Remove unnecessary blank node identifiers.</p>"},{"location":"frame/options/#yaml_ld.frame.FrameOptions.require_all","title":"require_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>require_all: bool = False\n</code></pre> <p>Default <code>@require_all</code> flag.</p>"},{"location":"from-rdf/","title":"from_rdf()","text":""},{"location":"from-rdf/#yaml_ld.from_rdf.from_rdf","title":"yaml_ld.from_rdf.from_rdf","text":"<pre><code>from_rdf(\n    dataset: str,\n    options: FromRDFOptions = DEFAULT_FROM_RDF_OPTIONS,\n) -&gt; JsonLdRecord\n</code></pre> <p>Convert a RDF dataset to a \uff0a-LD document.</p>"},{"location":"from-rdf/options/","title":"Options","text":""},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions","title":"yaml_ld.from_rdf.FromRDFOptions","text":"<p>               Bases: <code>BaseOptions</code></p> <p>Options for converting RDF to \uff0a-LD.</p>"},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format: str = 'application/n-quads'\n</code></pre> <p>The format if input is a string: 'application/n-quads' for N-Quads.</p>"},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions.use_native_types","title":"use_native_types  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>use_native_types: bool = False\n</code></pre> <p>Convert XSD types into native types (boolean, integer, double)?</p>"},{"location":"from-rdf/options/#yaml_ld.from_rdf.FromRDFOptions.use_rdf_type","title":"use_rdf_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>use_rdf_type: bool = False\n</code></pre> <p>True to use <code>rdf:type</code>, False to use <code>@type</code>.</p>"},{"location":"to-rdf/","title":"to_rdf()","text":""},{"location":"to-rdf/#yaml_ld.to_rdf.to_rdf","title":"yaml_ld.to_rdf.to_rdf","text":"<pre><code>to_rdf(\n    document: JsonLdInput,\n    options: ToRDFOptions = DEFAULT_TO_RDF_OPTIONS,\n) -&gt; Dataset | str\n</code></pre> <p>Convert a \uff0a-LD document to RDF.</p>"},{"location":"to-rdf/#example","title":"Example","text":"to_rdf.py<pre><code>from pprint import pprint\n\nimport yaml_ld\n\npprint(yaml_ld.to_rdf('pythagorean-theorem.yamlld'))\n</code></pre> pythagorean-theorem.yamlld<pre><code>\"@context\":\n  - https://json-ld.org/contexts/dollar-convenience.jsonld\n  - prov: http://www.w3.org/ns/prov#\n  - variable: https://variables.namespace/\n    =: https://math.namespace/equal\n    +: https://math.namespace/add\n    \u00b2: https://math.namespace/squared\n\n$id: https://dbpedia.org/page/Pythagorean_theorem\nprov:Entity:\n  =:\n    - +:\n      - \u00b2: variable:a\n      - \u00b2: variable:b\n    - \u00b2: variable:c\n</code></pre> python to_rdf.py<pre><code>{'@default': [{'object': {'type': 'blank node', 'value': '_:b1'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/equal'},\n               'subject': {'type': 'blank node', 'value': '_:b0'}},\n              {'object': {'type': 'blank node', 'value': '_:b4'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/equal'},\n               'subject': {'type': 'blank node', 'value': '_:b0'}},\n              {'object': {'type': 'blank node', 'value': '_:b2'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/add'},\n               'subject': {'type': 'blank node', 'value': '_:b1'}},\n              {'object': {'type': 'blank node', 'value': '_:b3'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/add'},\n               'subject': {'type': 'blank node', 'value': '_:b1'}},\n              {'object': {'datatype': 'http://www.w3.org/2001/XMLSchema#string',\n                          'type': 'literal',\n                          'value': 'variable:a'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/squared'},\n               'subject': {'type': 'blank node', 'value': '_:b2'}},\n              {'object': {'datatype': 'http://www.w3.org/2001/XMLSchema#string',\n                          'type': 'literal',\n                          'value': 'variable:b'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/squared'},\n               'subject': {'type': 'blank node', 'value': '_:b3'}},\n              {'object': {'datatype': 'http://www.w3.org/2001/XMLSchema#string',\n                          'type': 'literal',\n                          'value': 'variable:c'},\n               'predicate': {'type': 'IRI',\n                             'value': 'https://math.namespace/squared'},\n               'subject': {'type': 'blank node', 'value': '_:b4'}},\n              {'object': {'type': 'blank node', 'value': '_:b0'},\n               'predicate': {'type': 'IRI',\n                             'value': 'http://www.w3.org/ns/prov#Entity'},\n               'subject': {'type': 'IRI',\n                           'value': 'https://dbpedia.org/page/Pythagorean_theorem'}}]}\n</code></pre>"},{"location":"to-rdf/options/","title":"Options","text":""},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions","title":"yaml_ld.to_rdf.ToRDFOptions","text":"<p>               Bases: <code>BaseOptions</code>, <code>ExtractAllScriptsOptions</code></p> <p>Options for converting \uff0a-LD to RDF.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: URI | None = None\n</code></pre> <p>The base IRI to use.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.document_loader","title":"document_loader  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_loader: Any = None\n</code></pre> <p>The document loader.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.extract_all_scripts","title":"extract_all_scripts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extract_all_scripts: bool = False\n</code></pre> <p>True to extract all YAML-LD script elements from HTML, False to extract just the first.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format: str | None = None\n</code></pre> <p>The format to use to output a string: 'application/n-quads' for N-Quads.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.produce_generalized_rdf","title":"produce_generalized_rdf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>produce_generalized_rdf: bool = False\n</code></pre> <p>True to output generalized RDF, false to produce only standard RDF.</p>"},{"location":"to-rdf/options/#yaml_ld.to_rdf.ToRDFOptions.rdf_direction","title":"rdf_direction  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rdf_direction: str = 'i18n-datatype'\n</code></pre> <p>Only 'i18n-datatype' supported.</p>"},{"location":"types/document-loader-options/","title":"DocumentLoaderOptions","text":""},{"location":"types/document-loader-options/#yaml_ld.document_loaders.base.DocumentLoaderOptions","title":"yaml_ld.document_loaders.base.DocumentLoaderOptions  <code>module-attribute</code>","text":"<pre><code>DocumentLoaderOptions = TypedDict(\n    \"DocumentLoaderOptions\",\n    {\n        \"extractAllScripts\": bool,\n        \"headers\": dict[str, str],\n        \"base\": str,\n    },\n)\n</code></pre>"},{"location":"types/json-ld-context/","title":"JsonLdContext","text":""},{"location":"types/json-ld-context/#yaml_ld.models.JsonLdContext","title":"yaml_ld.models.JsonLdContext  <code>module-attribute</code>","text":"<pre><code>JsonLdContext = (\n    JsonLdRecord | list[JsonLdRecord | URI] | URI\n)\n</code></pre> <p>The <code>JsonLdContext</code> interface is used to refer to a value that may be a <code>JsonLdRecord</code>, a sequence of <code>JsonLdRecord</code>-s, or a string representing an IRI, which can be dereferenced to retrieve a valid JSON document.</p> <p>Specification</p>"},{"location":"types/json-ld-input/","title":"JsonLdInput","text":""},{"location":"types/json-ld-input/#yaml_ld.models.JsonLdInput","title":"yaml_ld.models.JsonLdInput  <code>module-attribute</code>","text":"<pre><code>JsonLdInput = JsonLdRecord | Sequence[JsonLdRecord] | URI\n</code></pre> <p>Input for <code>expand()</code>, <code>compact()</code> and other functions.</p> <p>Specification</p>"},{"location":"types/json-ld-record/","title":"JsonLdRecord","text":""},{"location":"types/json-ld-record/#yaml_ld.models.JsonLdRecord","title":"yaml_ld.models.JsonLdRecord  <code>module-attribute</code>","text":"<pre><code>JsonLdRecord = dict[str, Any]\n</code></pre>"},{"location":"types/remote-document/","title":"RemoteDocument","text":""},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument","title":"yaml_ld.models.RemoteDocument","text":"<p>               Bases: <code>TypedDict</code></p> <p>Specification of the remote document.</p>"},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument.contentType","title":"contentType  <code>instance-attribute</code>","text":"<pre><code>contentType: str\n</code></pre>"},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument.contextUrl","title":"contextUrl  <code>instance-attribute</code>","text":"<pre><code>contextUrl: str | None\n</code></pre>"},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument.document","title":"document  <code>instance-attribute</code>","text":"<pre><code>document: JsonLdRecord | list[JsonLdRecord]\n</code></pre>"},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument.documentUrl","title":"documentUrl  <code>instance-attribute</code>","text":"<pre><code>documentUrl: str\n</code></pre>"},{"location":"types/remote-document/#yaml_ld.models.RemoteDocument.profile","title":"profile  <code>instance-attribute</code>","text":"<pre><code>profile: str | None\n</code></pre>"},{"location":"types/uri/","title":"URI","text":""},{"location":"types/uri/#yaml_ld.models.URI","title":"yaml_ld.models.URI  <code>module-attribute</code>","text":"<pre><code>URI = str | URL | Path\n</code></pre> <p>A Universal Resource Identifier can be represented as a <code>Path</code> or as a <code>URL</code>.</p> <p>Or, it can be a <code>str</code>, and we will try to automatically identify what that is.</p>"},{"location":"types/loaders/","title":"Index","text":""},{"location":"types/loaders/#yaml_ld.document_loaders.default.DEFAULT_DOCUMENT_LOADER","title":"yaml_ld.document_loaders.default.DEFAULT_DOCUMENT_LOADER  <code>module-attribute</code>","text":"<pre><code>DEFAULT_DOCUMENT_LOADER = ChoiceBySchemeDocumentLoader(\n    file=LocalFileDocumentLoader(),\n    http=http_loader,\n    https=http_loader,\n)\n</code></pre>"},{"location":"types/loaders/base/","title":"Base","text":""},{"location":"types/loaders/base/#yaml_ld.document_loaders.base.DocumentLoader","title":"yaml_ld.document_loaders.base.DocumentLoader","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"types/loaders/base/#yaml_ld.document_loaders.base.DocumentLoader.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    source: URI, options: DocumentLoaderOptions\n) -&gt; RemoteDocument\n</code></pre> <p>Load a document.</p>"},{"location":"types/loaders/choice-by-scheme/","title":"ChoiceBySchemeDocumentLoader","text":""},{"location":"types/loaders/choice-by-scheme/#yaml_ld.document_loaders.choice_by_scheme.ChoiceBySchemeDocumentLoader","title":"yaml_ld.document_loaders.choice_by_scheme.ChoiceBySchemeDocumentLoader","text":"<p>               Bases: <code>DocumentLoader</code></p>"},{"location":"types/loaders/choice-by-scheme/#yaml_ld.document_loaders.choice_by_scheme.ChoiceBySchemeDocumentLoader.loaders","title":"loaders  <code>instance-attribute</code>","text":"<pre><code>loaders: dict[str, DocumentLoader] = loaders\n</code></pre>"},{"location":"types/loaders/choice-by-scheme/#yaml_ld.document_loaders.choice_by_scheme.ChoiceBySchemeDocumentLoader.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: URI, options: DocumentLoaderOptions\n) -&gt; RemoteDocument\n</code></pre> <p>Choose by scheme.</p>"},{"location":"types/loaders/choice-by-scheme/#yaml_ld.document_loaders.choice_by_scheme.ChoiceBySchemeDocumentLoader.__init__","title":"__init__","text":"<pre><code>__init__(**loaders: DocumentLoader) -&gt; None\n</code></pre>"},{"location":"types/loaders/http/","title":"HTTP","text":""},{"location":"types/loaders/http/#yaml_ld.document_loaders.http.HTTPDocumentLoader","title":"yaml_ld.document_loaders.http.HTTPDocumentLoader  <code>dataclass</code>","text":"<p>               Bases: <code>DocumentLoader</code></p> <p>Load documents from HTTP sources.</p>"},{"location":"types/loaders/http/#yaml_ld.document_loaders.http.HTTPDocumentLoader.session","title":"session  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>session: Session = field(default_factory=Session)\n</code></pre>"},{"location":"types/loaders/http/#yaml_ld.document_loaders.http.HTTPDocumentLoader.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: URI, options: DocumentLoaderOptions\n) -&gt; RemoteDocument\n</code></pre> <p>Load documents from HTTP sources.</p>"},{"location":"types/loaders/http/#yaml_ld.document_loaders.http.HTTPDocumentLoader.__init__","title":"__init__","text":"<pre><code>__init__(session: Session = Session()) -&gt; None\n</code></pre>"},{"location":"types/loaders/http/#yaml_ld.document_loaders.http.HTTPDocumentLoader.follow_link_header","title":"follow_link_header","text":"<pre><code>follow_link_header(\n    source: URI,\n    content_type: str | None,\n    link_header: str,\n    options: DocumentLoaderOptions,\n) -&gt; RemoteDocument | None\n</code></pre> <p>Follow Link header.</p>"},{"location":"types/loaders/local-file/","title":"Local File","text":""},{"location":"types/loaders/local-file/#yaml_ld.document_loaders.local_file.LocalFileDocumentLoader","title":"yaml_ld.document_loaders.local_file.LocalFileDocumentLoader","text":"<p>               Bases: <code>DocumentLoader</code></p> <p>Load documents from a local file system.</p>"},{"location":"types/loaders/local-file/#yaml_ld.document_loaders.local_file.LocalFileDocumentLoader.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: URI, options: DocumentLoaderOptions\n) -&gt; RemoteDocument\n</code></pre> <p>Load documents from a local file system.</p>"},{"location":"types/parsers/base/","title":"Base","text":""},{"location":"types/parsers/base/#yaml_ld.document_parsers.base.BaseDocumentParser","title":"yaml_ld.document_parsers.base.BaseDocumentParser","text":"<p>Parse documents of various types into LD.</p>"},{"location":"types/parsers/base/#yaml_ld.document_parsers.base.BaseDocumentParser.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    data_stream: BytesIO,\n    source: str,\n    options: DocumentLoaderOptions,\n) -&gt; JsonLdRecord | list[JsonLdRecord]\n</code></pre> <p>Parse raw data into Linked Data.</p>"},{"location":"types/parsers/html/","title":"HTML","text":""},{"location":"types/parsers/html/#yaml_ld.document_parsers.html_parser.HTMLDocumentParser","title":"yaml_ld.document_parsers.html_parser.HTMLDocumentParser","text":"<p>               Bases: <code>BaseDocumentParser</code></p> <p>Parse HTML documents, specifically their"},{"location":"types/parsers/rdf-xml/","title":"RDF/XML","text":""},{"location":"types/parsers/rdf-xml/#yaml_ld.document_parsers.rdf_xml_parser.RDFXMLParser","title":"yaml_ld.document_parsers.rdf_xml_parser.RDFXMLParser","text":"<p>               Bases: <code>BaseDocumentParser</code></p> <p>Parse RDF/XML documents.</p>"},{"location":"types/parsers/rdf-xml/#yaml_ld.document_parsers.rdf_xml_parser.RDFXMLParser.__call__","title":"__call__","text":"<pre><code>__call__(\n    data_stream: BytesIO,\n    source: str,\n    options: DocumentLoaderOptions,\n) -&gt; JsonLdRecord | list[JsonLdRecord]\n</code></pre> <p>Parse YAML document stream into LD.</p>"},{"location":"types/parsers/turtle/","title":"Turtle","text":""},{"location":"types/parsers/turtle/#yaml_ld.document_parsers.turtle_parser.TurtleParser","title":"yaml_ld.document_parsers.turtle_parser.TurtleParser","text":"<p>               Bases: <code>BaseDocumentParser</code></p> <p>Parse Turtle documents.</p>"},{"location":"types/parsers/turtle/#yaml_ld.document_parsers.turtle_parser.TurtleParser.__call__","title":"__call__","text":"<pre><code>__call__(\n    data_stream: BytesIO,\n    source: str,\n    options: DocumentLoaderOptions,\n) -&gt; JsonLdRecord | list[JsonLdRecord]\n</code></pre> <p>Parse YAML document stream into LD.</p>"},{"location":"types/parsers/yaml/","title":"YAML-LD/JSON-LD","text":""},{"location":"types/parsers/yaml/#yaml_ld.document_parsers.yaml_parser.YAMLDocumentParser","title":"yaml_ld.document_parsers.yaml_parser.YAMLDocumentParser","text":"<p>               Bases: <code>BaseDocumentParser</code></p> <p>Parse YAML documents.</p>"},{"location":"types/parsers/yaml/#yaml_ld.document_parsers.yaml_parser.YAMLDocumentParser.__call__","title":"__call__","text":"<pre><code>__call__(\n    data_stream: BytesIO,\n    source: str,\n    options: DocumentLoaderOptions,\n) -&gt; JsonLdRecord | list[JsonLdRecord]\n</code></pre> <p>Parse YAML document stream into LD.</p>"},{"location":"types/parsers/yaml/#yaml_ld.document_parsers.yaml_parser.YAMLDocumentParser._yaml_document_from_stream","title":"_yaml_document_from_stream","text":"<pre><code>_yaml_document_from_stream(\n    stream, extract_all_scripts: bool\n)\n</code></pre>"},{"location":"types/rdf/","title":"RDF","text":""},{"location":"types/rdf/blank-term/","title":"BlankTerm","text":""},{"location":"types/rdf/blank-term/#yaml_ld.rdf.BlankTerm","title":"yaml_ld.rdf.BlankTerm","text":"<p>               Bases: <code>TypedDict</code></p> <p>RDF Term.</p>"},{"location":"types/rdf/blank-term/#yaml_ld.rdf.BlankTerm.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal['blank node']\n</code></pre>"},{"location":"types/rdf/blank-term/#yaml_ld.rdf.BlankTerm.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>"},{"location":"types/rdf/dataset/","title":"Dataset","text":""},{"location":"types/rdf/dataset/#yaml_ld.rdf.Dataset","title":"yaml_ld.rdf.Dataset  <code>module-attribute</code>","text":"<pre><code>Dataset = dict[str, Graph]\n</code></pre>"},{"location":"types/rdf/graph/","title":"Graph","text":""},{"location":"types/rdf/graph/#yaml_ld.rdf.Graph","title":"yaml_ld.rdf.Graph  <code>module-attribute</code>","text":"<pre><code>Graph = list[Triple]\n</code></pre>"},{"location":"types/rdf/iri-term/","title":"IRITerm","text":""},{"location":"types/rdf/iri-term/#yaml_ld.rdf.IRITerm","title":"yaml_ld.rdf.IRITerm","text":"<p>               Bases: <code>TypedDict</code></p> <p>RDF Term.</p>"},{"location":"types/rdf/iri-term/#yaml_ld.rdf.IRITerm.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal['IRI']\n</code></pre>"},{"location":"types/rdf/iri-term/#yaml_ld.rdf.IRITerm.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>"},{"location":"types/rdf/literal-term/","title":"LiteralTerm","text":""},{"location":"types/rdf/literal-term/#yaml_ld.rdf.LiteralTerm","title":"yaml_ld.rdf.LiteralTerm","text":"<p>               Bases: <code>TypedDict</code></p> <p>RDF Term.</p>"},{"location":"types/rdf/literal-term/#yaml_ld.rdf.LiteralTerm.datatype","title":"datatype  <code>instance-attribute</code>","text":"<pre><code>datatype: str | None\n</code></pre>"},{"location":"types/rdf/literal-term/#yaml_ld.rdf.LiteralTerm.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal['literal']\n</code></pre>"},{"location":"types/rdf/literal-term/#yaml_ld.rdf.LiteralTerm.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>"},{"location":"types/rdf/term-type/","title":"TermType","text":""},{"location":"types/rdf/term-type/#yaml_ld.rdf.TermType","title":"yaml_ld.rdf.TermType  <code>module-attribute</code>","text":"<pre><code>TermType = Literal['IRI', 'blank node', 'literal']\n</code></pre>"},{"location":"types/rdf/term/","title":"Term","text":""},{"location":"types/rdf/term/#yaml_ld.rdf.Term","title":"yaml_ld.rdf.Term  <code>module-attribute</code>","text":"<pre><code>Term = IRITerm | BlankTerm | LiteralTerm\n</code></pre>"},{"location":"types/rdf/triple/","title":"Triple","text":""},{"location":"types/rdf/triple/#yaml_ld.rdf.Triple","title":"yaml_ld.rdf.Triple","text":"<p>               Bases: <code>TypedDict</code></p> <p>RDF Triple.</p>"},{"location":"types/rdf/triple/#yaml_ld.rdf.Triple.object","title":"object  <code>instance-attribute</code>","text":"<pre><code>object: Term\n</code></pre>"},{"location":"types/rdf/triple/#yaml_ld.rdf.Triple.predicate","title":"predicate  <code>instance-attribute</code>","text":"<pre><code>predicate: Term\n</code></pre>"},{"location":"types/rdf/triple/#yaml_ld.rdf.Triple.subject","title":"subject  <code>instance-attribute</code>","text":"<pre><code>subject: Term\n</code></pre>"},{"location":"types/third-party/path/","title":"pathlib.Path","text":""},{"location":"types/third-party/path/#pathlib.Path","title":"pathlib.Path","text":"<p>               Bases: <code>PurePath</code></p> <p>PurePath subclass that can make system calls.</p> <p>Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa.</p>"},{"location":"types/third-party/path/#pathlib.Path.__slots__","title":"__slots__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__slots__ = ()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._cparts","title":"_cparts  <code>property</code>","text":"<pre><code>_cparts\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.anchor","title":"anchor  <code>property</code>","text":"<pre><code>anchor\n</code></pre> <p>The concatenation of the drive and root, or ''.</p>"},{"location":"types/third-party/path/#pathlib.Path.drive","title":"drive  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>drive = property(\n    attrgetter(\"_drv\"),\n    doc=\"The drive prefix (letter or UNC path), if any.\",\n)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.name","title":"name  <code>property</code>","text":"<pre><code>name\n</code></pre> <p>The final path component, if any.</p>"},{"location":"types/third-party/path/#pathlib.Path.parent","title":"parent  <code>property</code>","text":"<pre><code>parent\n</code></pre> <p>The logical parent of the path.</p>"},{"location":"types/third-party/path/#pathlib.Path.parents","title":"parents  <code>property</code>","text":"<pre><code>parents\n</code></pre> <p>A sequence of this path's logical parents.</p>"},{"location":"types/third-party/path/#pathlib.Path.parts","title":"parts  <code>property</code>","text":"<pre><code>parts\n</code></pre> <p>An object providing sequence-like access to the components in the filesystem path.</p>"},{"location":"types/third-party/path/#pathlib.Path.root","title":"root  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>root = property(\n    attrgetter(\"_root\"), doc=\"The root of the path, if any.\"\n)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.stem","title":"stem  <code>property</code>","text":"<pre><code>stem\n</code></pre> <p>The final path component, minus its last suffix.</p>"},{"location":"types/third-party/path/#pathlib.Path.suffix","title":"suffix  <code>property</code>","text":"<pre><code>suffix\n</code></pre> <p>The final component's last suffix, if any.</p> <p>This includes the leading period. For example: '.txt'</p>"},{"location":"types/third-party/path/#pathlib.Path.suffixes","title":"suffixes  <code>property</code>","text":"<pre><code>suffixes\n</code></pre> <p>A list of the final component's suffixes, if any.</p> <p>These include the leading periods. For example: ['.tar', '.gz']</p>"},{"location":"types/third-party/path/#pathlib.Path.__bytes__","title":"__bytes__","text":"<pre><code>__bytes__()\n</code></pre> <p>Return the bytes representation of the path.  This is only recommended to use under Unix.</p>"},{"location":"types/third-party/path/#pathlib.Path.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__exit__","title":"__exit__","text":"<pre><code>__exit__(t, v, tb)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__fspath__","title":"__fspath__","text":"<pre><code>__fspath__()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__ge__","title":"__ge__","text":"<pre><code>__ge__(other)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__gt__","title":"__gt__","text":"<pre><code>__gt__(other)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__le__","title":"__le__","text":"<pre><code>__le__(other)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__lt__","title":"__lt__","text":"<pre><code>__lt__(other)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__new__","title":"__new__","text":"<pre><code>__new__(*args, **kwargs)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__reduce__","title":"__reduce__","text":"<pre><code>__reduce__()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__repr__","title":"__repr__","text":"<pre><code>__repr__()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__rtruediv__","title":"__rtruediv__","text":"<pre><code>__rtruediv__(key)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Return the string representation of the path, suitable for passing to system calls.</p>"},{"location":"types/third-party/path/#pathlib.Path.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(key)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._format_parsed_parts","title":"_format_parsed_parts  <code>classmethod</code>","text":"<pre><code>_format_parsed_parts(drv, root, parts)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._from_parsed_parts","title":"_from_parsed_parts  <code>classmethod</code>","text":"<pre><code>_from_parsed_parts(drv, root, parts)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._from_parts","title":"_from_parts  <code>classmethod</code>","text":"<pre><code>_from_parts(args)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._make_child","title":"_make_child","text":"<pre><code>_make_child(args)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._make_child_relpath","title":"_make_child_relpath","text":"<pre><code>_make_child_relpath(part)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._parse_args","title":"_parse_args  <code>classmethod</code>","text":"<pre><code>_parse_args(args)\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path._scandir","title":"_scandir","text":"<pre><code>_scandir()\n</code></pre>"},{"location":"types/third-party/path/#pathlib.Path.absolute","title":"absolute","text":"<pre><code>absolute()\n</code></pre> <p>Return an absolute version of this path by prepending the current working directory. No normalization or symlink resolution is performed.</p> <p>Use resolve() to get the canonical path to a file.</p>"},{"location":"types/third-party/path/#pathlib.Path.as_posix","title":"as_posix","text":"<pre><code>as_posix()\n</code></pre> <p>Return the string representation of the path with forward (/) slashes.</p>"},{"location":"types/third-party/path/#pathlib.Path.as_uri","title":"as_uri","text":"<pre><code>as_uri()\n</code></pre> <p>Return the path as a 'file' URI.</p>"},{"location":"types/third-party/path/#pathlib.Path.chmod","title":"chmod","text":"<pre><code>chmod(mode, *, follow_symlinks=True)\n</code></pre> <p>Change the permissions of the path, like os.chmod().</p>"},{"location":"types/third-party/path/#pathlib.Path.cwd","title":"cwd  <code>classmethod</code>","text":"<pre><code>cwd()\n</code></pre> <p>Return a new path pointing to the current working directory (as returned by os.getcwd()).</p>"},{"location":"types/third-party/path/#pathlib.Path.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Whether this path exists.</p>"},{"location":"types/third-party/path/#pathlib.Path.expanduser","title":"expanduser","text":"<pre><code>expanduser()\n</code></pre> <p>Return a new path with expanded ~ and ~user constructs (as returned by os.path.expanduser)</p>"},{"location":"types/third-party/path/#pathlib.Path.glob","title":"glob","text":"<pre><code>glob(pattern)\n</code></pre> <p>Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given relative pattern.</p>"},{"location":"types/third-party/path/#pathlib.Path.group","title":"group","text":"<pre><code>group()\n</code></pre> <p>Return the group name of the file gid.</p>"},{"location":"types/third-party/path/#pathlib.Path.hardlink_to","title":"hardlink_to","text":"<pre><code>hardlink_to(target)\n</code></pre> <p>Make this path a hard link pointing to the same file as target.</p> <p>Note the order of arguments (self, target) is the reverse of os.link's.</p>"},{"location":"types/third-party/path/#pathlib.Path.home","title":"home  <code>classmethod</code>","text":"<pre><code>home()\n</code></pre> <p>Return a new path pointing to the user's home directory (as returned by os.path.expanduser('~')).</p>"},{"location":"types/third-party/path/#pathlib.Path.is_absolute","title":"is_absolute","text":"<pre><code>is_absolute()\n</code></pre> <p>True if the path is absolute (has both a root and, if applicable, a drive).</p>"},{"location":"types/third-party/path/#pathlib.Path.is_block_device","title":"is_block_device","text":"<pre><code>is_block_device()\n</code></pre> <p>Whether this path is a block device.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_char_device","title":"is_char_device","text":"<pre><code>is_char_device()\n</code></pre> <p>Whether this path is a character device.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_dir","title":"is_dir","text":"<pre><code>is_dir()\n</code></pre> <p>Whether this path is a directory.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_fifo","title":"is_fifo","text":"<pre><code>is_fifo()\n</code></pre> <p>Whether this path is a FIFO.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_file","title":"is_file","text":"<pre><code>is_file()\n</code></pre> <p>Whether this path is a regular file (also True for symlinks pointing to regular files).</p>"},{"location":"types/third-party/path/#pathlib.Path.is_mount","title":"is_mount","text":"<pre><code>is_mount()\n</code></pre> <p>Check if this path is a POSIX mount point</p>"},{"location":"types/third-party/path/#pathlib.Path.is_relative_to","title":"is_relative_to","text":"<pre><code>is_relative_to(*other)\n</code></pre> <p>Return True if the path is relative to another path or False.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_reserved","title":"is_reserved","text":"<pre><code>is_reserved()\n</code></pre> <p>Return True if the path contains one of the special names reserved by the system, if any.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_socket","title":"is_socket","text":"<pre><code>is_socket()\n</code></pre> <p>Whether this path is a socket.</p>"},{"location":"types/third-party/path/#pathlib.Path.is_symlink","title":"is_symlink","text":"<pre><code>is_symlink()\n</code></pre> <p>Whether this path is a symbolic link.</p>"},{"location":"types/third-party/path/#pathlib.Path.iterdir","title":"iterdir","text":"<pre><code>iterdir()\n</code></pre> <p>Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'.</p>"},{"location":"types/third-party/path/#pathlib.Path.joinpath","title":"joinpath","text":"<pre><code>joinpath(*args)\n</code></pre> <p>Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored).</p>"},{"location":"types/third-party/path/#pathlib.Path.lchmod","title":"lchmod","text":"<pre><code>lchmod(mode)\n</code></pre> <p>Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's.</p>"},{"location":"types/third-party/path/#pathlib.Path.link_to","title":"link_to","text":"<pre><code>link_to(target)\n</code></pre> <p>Make the target path a hard link pointing to this path.</p> <p>Note this function does not make this path a hard link to target, despite the implication of the function and argument names. The order of arguments (target, link) is the reverse of Path.symlink_to, but matches that of os.link.</p> <p>Deprecated since Python 3.10 and scheduled for removal in Python 3.12. Use <code>hardlink_to()</code> instead.</p>"},{"location":"types/third-party/path/#pathlib.Path.lstat","title":"lstat","text":"<pre><code>lstat()\n</code></pre> <p>Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's.</p>"},{"location":"types/third-party/path/#pathlib.Path.match","title":"match","text":"<pre><code>match(path_pattern)\n</code></pre> <p>Return True if this path matches the given pattern.</p>"},{"location":"types/third-party/path/#pathlib.Path.mkdir","title":"mkdir","text":"<pre><code>mkdir(mode=511, parents=False, exist_ok=False)\n</code></pre> <p>Create a new directory at this given path.</p>"},{"location":"types/third-party/path/#pathlib.Path.open","title":"open","text":"<pre><code>open(\n    mode=\"r\",\n    buffering=-1,\n    encoding=None,\n    errors=None,\n    newline=None,\n)\n</code></pre> <p>Open the file pointed by this path and return a file object, as the built-in open() function does.</p>"},{"location":"types/third-party/path/#pathlib.Path.owner","title":"owner","text":"<pre><code>owner()\n</code></pre> <p>Return the login name of the file owner.</p>"},{"location":"types/third-party/path/#pathlib.Path.read_bytes","title":"read_bytes","text":"<pre><code>read_bytes()\n</code></pre> <p>Open the file in bytes mode, read it, and close the file.</p>"},{"location":"types/third-party/path/#pathlib.Path.read_text","title":"read_text","text":"<pre><code>read_text(encoding=None, errors=None)\n</code></pre> <p>Open the file in text mode, read it, and close the file.</p>"},{"location":"types/third-party/path/#pathlib.Path.readlink","title":"readlink","text":"<pre><code>readlink()\n</code></pre> <p>Return the path to which the symbolic link points.</p>"},{"location":"types/third-party/path/#pathlib.Path.relative_to","title":"relative_to","text":"<pre><code>relative_to(*other)\n</code></pre> <p>Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError.</p>"},{"location":"types/third-party/path/#pathlib.Path.rename","title":"rename","text":"<pre><code>rename(target)\n</code></pre> <p>Rename this path to the target path.</p> <p>The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, not the directory of the Path object.</p> <p>Returns the new Path instance pointing to the target path.</p>"},{"location":"types/third-party/path/#pathlib.Path.replace","title":"replace","text":"<pre><code>replace(target)\n</code></pre> <p>Rename this path to the target path, overwriting if that path exists.</p> <p>The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, not the directory of the Path object.</p> <p>Returns the new Path instance pointing to the target path.</p>"},{"location":"types/third-party/path/#pathlib.Path.resolve","title":"resolve","text":"<pre><code>resolve(strict=False)\n</code></pre> <p>Make the path absolute, resolving all symlinks on the way and also normalizing it.</p>"},{"location":"types/third-party/path/#pathlib.Path.rglob","title":"rglob","text":"<pre><code>rglob(pattern)\n</code></pre> <p>Recursively yield all existing files (of any kind, including directories) matching the given relative pattern, anywhere in this subtree.</p>"},{"location":"types/third-party/path/#pathlib.Path.rmdir","title":"rmdir","text":"<pre><code>rmdir()\n</code></pre> <p>Remove this directory.  The directory must be empty.</p>"},{"location":"types/third-party/path/#pathlib.Path.samefile","title":"samefile","text":"<pre><code>samefile(other_path)\n</code></pre> <p>Return whether other_path is the same or not as this file (as returned by os.path.samefile()).</p>"},{"location":"types/third-party/path/#pathlib.Path.stat","title":"stat","text":"<pre><code>stat(*, follow_symlinks=True)\n</code></pre> <p>Return the result of the stat() system call on this path, like os.stat() does.</p>"},{"location":"types/third-party/path/#pathlib.Path.symlink_to","title":"symlink_to","text":"<pre><code>symlink_to(target, target_is_directory=False)\n</code></pre> <p>Make this path a symlink pointing to the target path. Note the order of arguments (link, target) is the reverse of os.symlink.</p>"},{"location":"types/third-party/path/#pathlib.Path.touch","title":"touch","text":"<pre><code>touch(mode=438, exist_ok=True)\n</code></pre> <p>Create this file with the given access mode, if it doesn't exist.</p>"},{"location":"types/third-party/path/#pathlib.Path.unlink","title":"unlink","text":"<pre><code>unlink(missing_ok=False)\n</code></pre> <p>Remove this file or link. If the path is a directory, use rmdir() instead.</p>"},{"location":"types/third-party/path/#pathlib.Path.with_name","title":"with_name","text":"<pre><code>with_name(name)\n</code></pre> <p>Return a new path with the file name changed.</p>"},{"location":"types/third-party/path/#pathlib.Path.with_stem","title":"with_stem","text":"<pre><code>with_stem(stem)\n</code></pre> <p>Return a new path with the stem changed.</p>"},{"location":"types/third-party/path/#pathlib.Path.with_suffix","title":"with_suffix","text":"<pre><code>with_suffix(suffix)\n</code></pre> <p>Return a new path with the file suffix changed.  If the path has no suffix, add given suffix.  If the given suffix is an empty string, remove the suffix from the path.</p>"},{"location":"types/third-party/path/#pathlib.Path.write_bytes","title":"write_bytes","text":"<pre><code>write_bytes(data)\n</code></pre> <p>Open the file in bytes mode, write to it, and close the file.</p>"},{"location":"types/third-party/path/#pathlib.Path.write_text","title":"write_text","text":"<pre><code>write_text(data, encoding=None, errors=None, newline=None)\n</code></pre> <p>Open the file in text mode, write to it, and close the file.</p>"},{"location":"types/third-party/url/","title":"yarl.URL","text":""},{"location":"types/third-party/url/#yarl.URL","title":"yarl.URL","text":""},{"location":"types/third-party/url/#yarl.URL.__slots__","title":"__slots__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__slots__ = (\n    \"_cache\",\n    \"_scheme\",\n    \"_netloc\",\n    \"_path\",\n    \"_query\",\n    \"_fragment\",\n)\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._fragment","title":"_fragment  <code>instance-attribute</code>","text":"<pre><code>_fragment: str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._netloc","title":"_netloc  <code>instance-attribute</code>","text":"<pre><code>_netloc: str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._path","title":"_path  <code>instance-attribute</code>","text":"<pre><code>_path: str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._query","title":"_query  <code>instance-attribute</code>","text":"<pre><code>_query: str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._scheme","title":"_scheme  <code>instance-attribute</code>","text":"<pre><code>_scheme: str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__bytes__","title":"__bytes__","text":"<pre><code>__bytes__() -&gt; bytes\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__getstate__","title":"__getstate__","text":"<pre><code>__getstate__() -&gt; tuple[SplitResult]\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__hash__","title":"__hash__","text":"<pre><code>__hash__() -&gt; int\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__init_subclass__","title":"__init_subclass__","text":"<pre><code>__init_subclass__()\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__mod__","title":"__mod__","text":"<pre><code>__mod__(query: Query) -&gt; URL\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__new__","title":"__new__","text":"<pre><code>__new__(\n    val: Union[\n        str, SplitResult, URL, UndefinedType\n    ] = UNDEFINED,\n    *,\n    encoded: bool = False,\n    strict: Union[bool, None] = None\n) -&gt; URL\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__setstate__","title":"__setstate__","text":"<pre><code>__setstate__(state)\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(name: str) -&gt; URL\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL._cache_netloc","title":"_cache_netloc","text":"<pre><code>_cache_netloc() -&gt; None\n</code></pre> <p>Cache the netloc parts of the URL.</p>"},{"location":"types/third-party/url/#yarl.URL._make_child","title":"_make_child","text":"<pre><code>_make_child(\n    paths: Sequence[str], encoded: bool = False\n) -&gt; URL\n</code></pre> <p>add paths to self._path, accounting for absolute vs relative paths, keep existing, but do not create new, empty segments</p>"},{"location":"types/third-party/url/#yarl.URL._origin","title":"_origin","text":"<pre><code>_origin() -&gt; URL\n</code></pre> <p>Return an URL with scheme, host and port parts only.</p> <p>user, password, path, query and fragment are removed.</p>"},{"location":"types/third-party/url/#yarl.URL._parsed_query","title":"_parsed_query","text":"<pre><code>_parsed_query() -&gt; list[tuple[str, str]]\n</code></pre> <p>Parse query part of URL.</p>"},{"location":"types/third-party/url/#yarl.URL._val","title":"_val","text":"<pre><code>_val() -&gt; SplitURLType\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.absolute","title":"absolute","text":"<pre><code>absolute() -&gt; bool\n</code></pre> <p>A check for absolute URLs.</p> <p>Return True for absolute ones (having scheme or starting with //), False otherwise.</p>"},{"location":"types/third-party/url/#yarl.URL.authority","title":"authority","text":"<pre><code>authority() -&gt; str\n</code></pre> <p>Decoded authority part of URL.</p> <p>Empty string for relative URLs.</p>"},{"location":"types/third-party/url/#yarl.URL.build","title":"build  <code>classmethod</code>","text":"<pre><code>build(\n    *,\n    scheme: str = \"\",\n    authority: str = \"\",\n    user: Union[str, None] = None,\n    password: Union[str, None] = None,\n    host: str = \"\",\n    port: Union[int, None] = None,\n    path: str = \"\",\n    query: Union[Query, None] = None,\n    query_string: str = \"\",\n    fragment: str = \"\",\n    encoded: bool = False\n) -&gt; URL\n</code></pre> <p>Creates and returns a new URL</p>"},{"location":"types/third-party/url/#yarl.URL.explicit_port","title":"explicit_port","text":"<pre><code>explicit_port() -&gt; Union[int, None]\n</code></pre> <p>Port part of URL, without scheme-based fallback.</p> <p>None for relative URLs or URLs without explicit port.</p>"},{"location":"types/third-party/url/#yarl.URL.extend_query","title":"extend_query","text":"<pre><code>extend_query(query: Query) -&gt; URL\n</code></pre><pre><code>extend_query(**kwargs: QueryVariable) -&gt; URL\n</code></pre> <pre><code>extend_query(*args: Any, **kwargs: Any) -&gt; URL\n</code></pre> <p>Return a new URL with query part combined with the existing.</p> <p>This method will not remove existing query parameters.</p> <p>Example:</p> <p>url = URL('http://example.com/?a=1&amp;b=2') url.extend_query(a=3, c=4) URL('http://example.com/?a=1&amp;b=2&amp;a=3&amp;c=4')</p>"},{"location":"types/third-party/url/#yarl.URL.fragment","title":"fragment","text":"<pre><code>fragment() -&gt; str\n</code></pre> <p>Decoded fragment part of URL.</p> <p>Empty string if fragment is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.host","title":"host","text":"<pre><code>host() -&gt; Union[str, None]\n</code></pre> <p>Decoded host part of URL.</p> <p>None for relative URLs.</p>"},{"location":"types/third-party/url/#yarl.URL.host_port_subcomponent","title":"host_port_subcomponent","text":"<pre><code>host_port_subcomponent() -&gt; Union[str, None]\n</code></pre> <p>Return the host and port subcomponent part of URL.</p> <p>Trailing dots are removed from the host part.</p> <p>This value is suitable for use in the Host header of an HTTP request.</p> <p>None for relative URLs.</p> <p>https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2 <code>IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"</code> https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3 port        = *DIGIT</p> <p>Examples: - <code>http://example.com:8080</code> -&gt; <code>example.com:8080</code> - <code>http://example.com:80</code> -&gt; <code>example.com</code> - <code>http://example.com.:80</code> -&gt; <code>example.com</code> - <code>https://127.0.0.1:8443</code> -&gt; <code>127.0.0.1:8443</code> - <code>https://[::1]:8443</code> -&gt; <code>[::1]:8443</code> - <code>http://[::1]</code> -&gt; <code>[::1]</code></p>"},{"location":"types/third-party/url/#yarl.URL.host_subcomponent","title":"host_subcomponent","text":"<pre><code>host_subcomponent() -&gt; Union[str, None]\n</code></pre> <p>Return the host subcomponent part of URL.</p> <p>None for relative URLs.</p> <p>https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2</p> <p><code>IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"</code></p> <p>Examples: - <code>http://example.com:8080</code> -&gt; <code>example.com</code> - <code>http://example.com:80</code> -&gt; <code>example.com</code> - <code>https://127.0.0.1:8443</code> -&gt; <code>127.0.0.1</code> - <code>https://[::1]:8443</code> -&gt; <code>[::1]</code> - <code>http://[::1]</code> -&gt; <code>[::1]</code></p>"},{"location":"types/third-party/url/#yarl.URL.human_repr","title":"human_repr","text":"<pre><code>human_repr() -&gt; str\n</code></pre> <p>Return decoded human readable string for URL representation.</p>"},{"location":"types/third-party/url/#yarl.URL.is_absolute","title":"is_absolute","text":"<pre><code>is_absolute() -&gt; bool\n</code></pre> <p>A check for absolute URLs.</p> <p>Return True for absolute ones (having scheme or starting with //), False otherwise.</p> <p>Is is preferred to call the .absolute property instead as it is cached.</p>"},{"location":"types/third-party/url/#yarl.URL.is_default_port","title":"is_default_port","text":"<pre><code>is_default_port() -&gt; bool\n</code></pre> <p>A check for default port.</p> <p>Return True if port is default for specified scheme, e.g. 'http://python.org' or 'http://python.org:80', False otherwise.</p> <p>Return False for relative URLs.</p>"},{"location":"types/third-party/url/#yarl.URL.join","title":"join","text":"<pre><code>join(url: URL) -&gt; URL\n</code></pre> <p>Join URLs</p> <p>Construct a full (\u201cabsolute\u201d) URL by combining a \u201cbase URL\u201d (self) with another URL (url).</p> <p>Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL.</p>"},{"location":"types/third-party/url/#yarl.URL.joinpath","title":"joinpath","text":"<pre><code>joinpath(*other: str, encoded: bool = False) -&gt; URL\n</code></pre> <p>Return a new URL with the elements in other appended to the path.</p>"},{"location":"types/third-party/url/#yarl.URL.name","title":"name","text":"<pre><code>name() -&gt; str\n</code></pre> <p>The last part of parts.</p>"},{"location":"types/third-party/url/#yarl.URL.origin","title":"origin","text":"<pre><code>origin() -&gt; URL\n</code></pre> <p>Return an URL with scheme, host and port parts only.</p> <p>user, password, path, query and fragment are removed.</p>"},{"location":"types/third-party/url/#yarl.URL.parent","title":"parent","text":"<pre><code>parent() -&gt; URL\n</code></pre> <p>A new URL with last part of path removed and cleaned up query and fragment.</p>"},{"location":"types/third-party/url/#yarl.URL.parts","title":"parts","text":"<pre><code>parts() -&gt; tuple[str, ...]\n</code></pre> <p>A tuple containing decoded path parts.</p> <p>('/',) for absolute URLs if path is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.password","title":"password","text":"<pre><code>password() -&gt; Union[str, None]\n</code></pre> <p>Decoded password part of URL.</p> <p>None if password is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.path","title":"path","text":"<pre><code>path() -&gt; str\n</code></pre> <p>Decoded path of URL.</p> <p>/ for absolute URLs without path part.</p>"},{"location":"types/third-party/url/#yarl.URL.path_qs","title":"path_qs","text":"<pre><code>path_qs() -&gt; str\n</code></pre> <p>Decoded path of URL with query.</p>"},{"location":"types/third-party/url/#yarl.URL.path_safe","title":"path_safe","text":"<pre><code>path_safe() -&gt; str\n</code></pre> <p>Decoded path of URL.</p> <p>/ for absolute URLs without path part.</p> <p>/ (%2F) and % (%25) are not decoded</p>"},{"location":"types/third-party/url/#yarl.URL.port","title":"port","text":"<pre><code>port() -&gt; Union[int, None]\n</code></pre> <p>Port part of URL, with scheme-based fallback.</p> <p>None for relative URLs or URLs without explicit port and scheme without default port substitution.</p>"},{"location":"types/third-party/url/#yarl.URL.query","title":"query","text":"<pre><code>query() -&gt; MultiDictProxy[str]\n</code></pre> <p>A MultiDictProxy representing parsed query parameters in decoded representation.</p> <p>Empty value if URL has no query part.</p>"},{"location":"types/third-party/url/#yarl.URL.query_string","title":"query_string","text":"<pre><code>query_string() -&gt; str\n</code></pre> <p>Decoded query part of URL.</p> <p>Empty string if query is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_authority","title":"raw_authority","text":"<pre><code>raw_authority() -&gt; str\n</code></pre> <p>Encoded authority part of URL.</p> <p>Empty string for relative URLs.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_fragment","title":"raw_fragment","text":"<pre><code>raw_fragment() -&gt; str\n</code></pre> <p>Encoded fragment part of URL.</p> <p>Empty string if fragment is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_host","title":"raw_host","text":"<pre><code>raw_host() -&gt; Union[str, None]\n</code></pre> <p>Encoded host part of URL.</p> <p>None for relative URLs.</p> <p>When working with IPv6 addresses, use the <code>host_subcomponent</code> property instead as it will return the host subcomponent with brackets.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_name","title":"raw_name","text":"<pre><code>raw_name() -&gt; str\n</code></pre> <p>The last part of raw_parts.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_parts","title":"raw_parts","text":"<pre><code>raw_parts() -&gt; tuple[str, ...]\n</code></pre> <p>A tuple containing encoded path parts.</p> <p>('/',) for absolute URLs if path is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_password","title":"raw_password","text":"<pre><code>raw_password() -&gt; Union[str, None]\n</code></pre> <p>Encoded password part of URL.</p> <p>None if password is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_path","title":"raw_path","text":"<pre><code>raw_path() -&gt; str\n</code></pre> <p>Encoded path of URL.</p> <p>/ for absolute URLs without path part.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_path_qs","title":"raw_path_qs","text":"<pre><code>raw_path_qs() -&gt; str\n</code></pre> <p>Encoded path of URL with query.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_query_string","title":"raw_query_string","text":"<pre><code>raw_query_string() -&gt; str\n</code></pre> <p>Encoded query part of URL.</p> <p>Empty string if query is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.raw_suffix","title":"raw_suffix","text":"<pre><code>raw_suffix() -&gt; str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.raw_suffixes","title":"raw_suffixes","text":"<pre><code>raw_suffixes() -&gt; tuple[str, ...]\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.raw_user","title":"raw_user","text":"<pre><code>raw_user() -&gt; Union[str, None]\n</code></pre> <p>Encoded user part of URL.</p> <p>None if user is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.relative","title":"relative","text":"<pre><code>relative() -&gt; URL\n</code></pre> <p>Return a relative part of the URL.</p> <p>scheme, user, password, host and port are removed.</p>"},{"location":"types/third-party/url/#yarl.URL.scheme","title":"scheme","text":"<pre><code>scheme() -&gt; str\n</code></pre> <p>Scheme for absolute URLs.</p> <p>Empty string for relative URLs or URLs starting with //</p>"},{"location":"types/third-party/url/#yarl.URL.suffix","title":"suffix","text":"<pre><code>suffix() -&gt; str\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.suffixes","title":"suffixes","text":"<pre><code>suffixes() -&gt; tuple[str, ...]\n</code></pre>"},{"location":"types/third-party/url/#yarl.URL.update_query","title":"update_query","text":"<pre><code>update_query(query: Query) -&gt; URL\n</code></pre><pre><code>update_query(**kwargs: QueryVariable) -&gt; URL\n</code></pre> <pre><code>update_query(*args: Any, **kwargs: Any) -&gt; URL\n</code></pre> <p>Return a new URL with query part updated.</p> <p>This method will overwrite existing query parameters.</p> <p>Example:</p> <p>url = URL('http://example.com/?a=1&amp;b=2') url.update_query(a=3, c=4) URL('http://example.com/?a=3&amp;b=2&amp;c=4')</p>"},{"location":"types/third-party/url/#yarl.URL.user","title":"user","text":"<pre><code>user() -&gt; Union[str, None]\n</code></pre> <p>Decoded user part of URL.</p> <p>None if user is missing.</p>"},{"location":"types/third-party/url/#yarl.URL.with_fragment","title":"with_fragment","text":"<pre><code>with_fragment(fragment: Union[str, None]) -&gt; URL\n</code></pre> <p>Return a new URL with fragment replaced.</p> <p>Autoencode fragment if needed.</p> <p>Clear fragment to default if None is passed.</p>"},{"location":"types/third-party/url/#yarl.URL.with_host","title":"with_host","text":"<pre><code>with_host(host: str) -&gt; URL\n</code></pre> <p>Return a new URL with host replaced.</p> <p>Autoencode host if needed.</p> <p>Changing host for relative URLs is not allowed, use .join() instead.</p>"},{"location":"types/third-party/url/#yarl.URL.with_name","title":"with_name","text":"<pre><code>with_name(\n    name: str,\n    *,\n    keep_query: bool = False,\n    keep_fragment: bool = False\n) -&gt; URL\n</code></pre> <p>Return a new URL with name (last part of path) replaced.</p> <p>Query and fragment parts are cleaned up.</p> <p>Name is encoded if needed.</p>"},{"location":"types/third-party/url/#yarl.URL.with_password","title":"with_password","text":"<pre><code>with_password(password: Union[str, None]) -&gt; URL\n</code></pre> <p>Return a new URL with password replaced.</p> <p>Autoencode password if needed.</p> <p>Clear password if argument is None.</p>"},{"location":"types/third-party/url/#yarl.URL.with_path","title":"with_path","text":"<pre><code>with_path(\n    path: str,\n    *,\n    encoded: bool = False,\n    keep_query: bool = False,\n    keep_fragment: bool = False\n) -&gt; URL\n</code></pre> <p>Return a new URL with path replaced.</p>"},{"location":"types/third-party/url/#yarl.URL.with_port","title":"with_port","text":"<pre><code>with_port(port: Union[int, None]) -&gt; URL\n</code></pre> <p>Return a new URL with port replaced.</p> <p>Clear port to default if None is passed.</p>"},{"location":"types/third-party/url/#yarl.URL.with_query","title":"with_query","text":"<pre><code>with_query(query: Query) -&gt; URL\n</code></pre><pre><code>with_query(**kwargs: QueryVariable) -&gt; URL\n</code></pre> <pre><code>with_query(*args: Any, **kwargs: Any) -&gt; URL\n</code></pre> <p>Return a new URL with query part replaced.</p> <p>Accepts any Mapping (e.g. dict, multidict.MultiDict instances) or str, autoencode the argument if needed.</p> <p>A sequence of (key, value) pairs is supported as well.</p> <p>It also can take an arbitrary number of keyword arguments.</p> <p>Clear query if None is passed.</p>"},{"location":"types/third-party/url/#yarl.URL.with_scheme","title":"with_scheme","text":"<pre><code>with_scheme(scheme: str) -&gt; URL\n</code></pre> <p>Return a new URL with scheme replaced.</p>"},{"location":"types/third-party/url/#yarl.URL.with_suffix","title":"with_suffix","text":"<pre><code>with_suffix(\n    suffix: str,\n    *,\n    keep_query: bool = False,\n    keep_fragment: bool = False\n) -&gt; URL\n</code></pre> <p>Return a new URL with suffix (file extension of name) replaced.</p> <p>Query and fragment parts are cleaned up.</p> <p>suffix is encoded if needed.</p>"},{"location":"types/third-party/url/#yarl.URL.with_user","title":"with_user","text":"<pre><code>with_user(user: Union[str, None]) -&gt; URL\n</code></pre> <p>Return a new URL with user replaced.</p> <p>Autoencode user if needed.</p> <p>Clear user/password if user is None.</p>"},{"location":"types/third-party/url/#yarl.URL.without_query_params","title":"without_query_params","text":"<pre><code>without_query_params(*query_params: str) -&gt; URL\n</code></pre> <p>Remove some keys from query part and return new URL.</p>"}]}